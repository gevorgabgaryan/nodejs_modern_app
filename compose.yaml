version: '3'

services:
  main:
    build:
      context: ./
    ports:
      - "3117:3116"
    env_file:
      - .env
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3115/health"]  # Adjust the URL to your health check endpoint
      interval: 30s
      timeout: 10s
      retries: 3

  registry:
    build:
      context: ./microservices/registry-service
    env_file:
      - .env.docker
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:YOUR_PORT/health"]  # Adjust the URL and port to your health check endpoint
      interval: 30s
      timeout: 10s
      retries: 3

  catalog:
    build:
      context: ./microservices/catalog-service
    depends_on:
      - mongodb
    env_file:
      - .env.docker
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:YOUR_PORT/health"]  # Adjust the URL and port to your health check endpoint
      interval: 30s
      timeout: 10s
      retries: 3

  order:
    build:
      context: ./microservices/order-service
    depends_on:
      - mysql
      - rabbitmq
    env_file:
      - .env.docker
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:YOUR_PORT/health"]  # Adjust the URL and port to your health check endpoint
      interval: 30s
      timeout: 10s
      retries: 3

  mysql:
    image: mysql:8
    volumes:
      - ./mysql:/var/lib/mysql
    env_file:
      - .env.docker
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]  # Adjust the ping command based on your MySQL setup
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:latest
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:latest
    env_file:
      - .env.docker
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "mongo", "localhost:27017", "--eval", "quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)"]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:latest
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  mynetwork:
